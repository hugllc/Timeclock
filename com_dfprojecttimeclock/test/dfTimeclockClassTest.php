<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * Timeclock is a Joomla application to keep track of employee time
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    TimeclockTest
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$    
 * @link       https://dev.hugllc.com/index.php/Project:Timeclock
 */

// Call dftimeclockClassTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "dftimeclockClassTest::main");
}
// This is for the joomla extensions
if (!defined('_VALID_MOS')) {
    define('_VALID_MOS', true);
}

/** The test case class */
require_once "PHPUnit/Framework/TestCase.php";
/** The test suite class */
require_once "PHPUnit/Framework/TestSuite.php";
require_once dirname(__FILE__).'/../../com_dfprojecttimeclock/dfprojecttimeclock.class.php';
require_once dirname(__FILE__).'/../../test/JoomlaMock/joomla.php';
require_once dirname(__FILE__).'/../../test/JoomlaMock/JoomlaTestCase.php';

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Test
 * @package    TimeclockTest
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2007 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:Timeclock
 */
class dftimeclockClassTest extends JoomlaTestCase
{
    /**
     * Runs the test methods of this class.
     *
     * @return void
     *
     * @access public
     * @static
     */
    public static function main() 
    {
        include_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("dftimeclockClassTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     *
     * @access protected
     */
    protected function setUp() 
    {
        parent::setUp();
        $this->installComponent("com_dfprefs");
        $this->installComponent("com_dfproject");
        $this->installComponent("com_dfprojecttimeclock");
        $this->o = new timesheet();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     *
     * @access protected
     */
    protected function tearDown() 
    {
        parent::tearDown();
        unset($this->o);
    }


    /**
     * dataProvider for testFixDate
     *
     * @return array
     */
    public static function dataFixDate() 
    {
        return array(
            array("2007-12-04", 1196769600),
        );
    }
    /**
     * test registerDriver
     *
     * @param mixed $date   The date to feed the function
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataFixDate
     */
    public function testFixDate($date, $expect) 
    {
        $this->o->fixDate($date);
        $this->assertSame($expect, $date);
    }


    /**
     * dataProvider for testGetPeriod
     *
     * @return array
     */
    public static function dataGetPeriod() 
    {
        return array(
            array(
                "2007-11-24", 
                1196769600,
                array(
                    "start" => 1195905600,
                    "end" => 1196769600,
                    "prev" => 1194955200,
                    "prevend" => 1195819200,
                    "next" => 1196856000,
                    "nextend" => 1197720000,
                    "periodlength" => 11,
                ),
            ),
        );
    }
    /**
     * test getPeriod
     *
     * @param mixed $start  The start date to feed the function
     * @param mixed $end    The end date to feed the function
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataGetPeriod
     */
    public function testGetPeriod($start, $end, $expect) 
    {
        $ret = $this->o->getPeriod($start, $end);
        $this->assertSame($expect, $ret);
    }
    /**
     * test getPeriod
     *
     * @param mixed $start  The start date to feed the function
     * @param mixed $end    The end date to feed the function
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataGetPeriod
     */
    public function testGetPeriodAttrib($start, $end, $expect) 
    {
        $this->o->getPeriod($start, $end);
        $ret = $this->readAttribute($this->o, "period");
        $this->assertSame($expect, $ret);
    }
    /**
     * test getPeriod
     *
     * @param mixed $start  The start date to feed the function
     * @param mixed $end    The end date to feed the function
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataGetPeriod
     */
    public function testSetPeriod($start, $end, $expect) 
    {
        $this->o->setPeriod($start, $end);
        $ret = $this->readAttribute($this->o, "period");
        $this->assertSame($expect, $ret);
    }

    /**
     * dataProvider for testGetPayPeriod
     *
     * @return array
     */
    public static function dataGetPayPeriod() 
    {
        return array(
            array(
                "2007-11-24", 
                array(
                    "start" => 1195473600,
                    "end" => 1196596800,
                    "prev" => 1194264000,
                    "prevend" => 1195387200,
                    "next" => 1196683200,
                    "nextend" => 1197806400,
                    "periodlength" => 14,
                ),
            ),
            // This one tests DLST
            array(
                "2007-03-09", 
                array(
                    "start" => strtotime("2007-02-26 06:00:00"),
                    "end" => strtotime("2007-03-11 06:00:00"),
                    "prev" => strtotime("2007-02-12 06:00:00"),
                    "prevend" => strtotime("2007-02-25 06:00:00"),
                    "next" => strtotime("2007-03-12 06:00:00"),
                    "nextend" => strtotime("2007-03-25 06:00:00"),
                    "periodlength" => 14,
                ),
            ),
            // This one tests Leap Year (and DLST!)
            array(
                "2008-02-28", 
                array(
                    "start" => strtotime("2008-02-25 06:00:00"),
                    "end" => strtotime("2008-03-09 06:00:00"),
                    "prev" => strtotime("2008-02-11 06:00:00"),
                    "prevend" => strtotime("2008-02-24 06:00:00"),
                    "next" => strtotime("2008-03-10 06:00:00"),
                    "nextend" => strtotime("2008-03-23 06:00:00"),
                    "periodlength" => 14,
                ),
            ),
        );
    }
    /**
     * test getPeriod
     *
     * @param mixed $date   The date to feed the function
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataGetPayPeriod
     */
    public function testGetPayPeriod($date, $expect) 
    {
        $ret = $this->o->getPayPeriod($date);
        $this->assertSame($expect, $ret);
    }

    /**
     * dataProvider for testGetPayPeriodWhere
     *
     * @return array
     */
    public static function dataGetPayPeriodWhere() 
    {
        return array(
            array(
                "2007-11-24",
                " (#__dfproject_timesheet.Date>='2007-11-19' AND #__dfproject_timesheet.Date<='2007-12-02') ",
            ),
       );
    }
    /**
     * test getPeriod
     *
     * @param mixed $date   The date to feed the function
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataGetPayPeriodWhere
     */
    public function testGetPayPeriodWhere($date, $expect) 
    {
        $ret = $this->o->getPayPeriodWhere($date);
        $this->assertSame($expect, $ret);
    }

    /**
     * dataProvider for testNotePopup
     *
     * @return array
     */
    public static function dataNotePopup() 
    {
        return array(
            array(
                "test",
                "<note>This i\r\ns a te\rst\n \t</note>",
                array(
                    "tooltip" => "&lt;note&gt;This i  s a te st  \t&lt;/note&gt;", 
                    "title"   => "Notes:", 
                    "width"   => '', 
                    "image"   => '', 
                    "text"    => "test", 
                    "href"    => '', 
                    "link"    => false,
                ),
            ),
       );
    }
    /**
     * test getPeriod
     *
     * @param string $text   Text to link
     * @param string $note   Note to popup over link
     * @param bool   $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataNotePopup
     */
    public function testNotePopup($text, $note, $expect) 
    {
        $ret = $this->o->notePopup($text, $note);
        $this->assertSame($expect, $ret);
    }

    /**
     * dataProvider for testNotePopup
     *
     * @return array
     */
    public static function dataProjectName() 
    {
        return array(
            array(
                new MosClass(array(
                                "id" => 3,
                                "description" => "<note>This i\r\ns a te\rst\n \t</note>",
                                "name" => "pro\nJect",
                                "wcCode" => 2534,
                             )),
                array(
                    "tooltip" => "&lt;note&gt;This i  s a te st  \t&lt;/note&gt;", 
                    "title"   => "3. pro Ject (2534)", 
                    "width"   => '', 
                    "image"   => '', 
                    "text"    => "pro Ject", 
                    "href"    => '', 
                    "link"    => false,
                ),
            ),
       );
    }
    /**
     * test getPeriod
     *
     * @param string $proj   The project name
     * @param bool   $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataProjectName
     */
    public function testProjectName($proj, $expect) 
    {
        $ret = $this->o->ProjectName($proj);
        $this->assertSame($expect, $ret);
    }


    /**
     * dataProvider for testNotePopup
     *
     * @return array
     */
    public static function dataCheckUser() 
    {
        return array(
            array(
                1,
                "test",
                "test",
            ),
       );
    }
    /**
     * test getPeriod
     *
     * @param int    $user_id    The user id
     * @param string $user_name  The user name
     * @param bool   $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataCheckUser
     */
    public function testCheckUser($user_id, $user_name, $expect) 
    {
        $class = new MosClass(array("user_id" => $user_id, "user_name" => $user_name));
        $ret = $this->o->check_user($class);
        $this->assertSame($expect, $class->user_name);
    }

    /**
     * dataProvider for testGetSqlDate
     *
     * @return array
     */
    public static function dataGetSqlDate() 
    {
        return array(
            array(
                array("Y" => 2005, "m" => 12, "d" => 25),
                "2005-12-25",
            ),
            array(
                array("y" => 05, "M" => 12, "d" => 25),
                "2005-12-25",
            ),
            array(
                true,
                true,
            ),
            array(
                1196769600,
                "2007-12-04", 
            ),
       );
    }
    /**
     * test getPeriod
     *
     * @param mixed $dateArray The date to use
     * @param bool  $expect    The result to expect
     *
     * @return void
     *
     * @dataProvider dataGetSqlDate
     */
    public function testGetSqlDate($dateArray, $expect) 
    {
        $ret = $this->o->getSqlDate($dateArray);
        $this->assertSame($expect, $ret);
    }

    /**
     * dataProvider for testCheckHours
     *
     * @return array
     */
    public static function dataCheckHours() 
    {
        return array(
            array(0, true),
            array(18, true),
            array(19, false),
            array(20, false),
        );
    }
    /**
     * test getPeriod
     *
     * @param mixed $hours  The number of hours
     * @param bool  $expect The result to expect
     *
     * @return void
     *
     * @dataProvider dataCheckHours
     */
    public function testCheckHours($hours, $expect) 
    {
        $ret = $this->o->checkHours($hours);
        $this->assertSame($expect, $ret);
    }

}

// Call dftimeclockClassTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "dftimeclockClassTest::main") {
    dftimeclockClassTest::main();
}

?>
