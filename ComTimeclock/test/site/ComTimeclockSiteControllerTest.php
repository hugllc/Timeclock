<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * ComTimeclock is a Joomla application to keep track of employee time
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    ComTimeclockTest
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$    
 * @link       https://dev.hugllc.com/index.php/Project:ComTimeclock:JoomlaUI
 */

/** Require the JoomlaMock stuff */
require_once dirname(__FILE__).'/../JoomlaMock/joomla.php';
require_once dirname(__FILE__).'/../JoomlaMock/testCases/JControllerTest.php';
/** Require the module under test */
require_once dirname(__FILE__).'/../../site/controller.php';

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Test
 * @package    ComTimeclockTest
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:ComTimeclock:JoomlaUI
 */
class ComTimeclockSiteControllerTest extends JControllerTest
{
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp() 
    {
        $this->o = new TimeclockController();
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown() 
    {
        parent::tearDown();
        unset($this->o);
    }
    /**
     * Data provider
     *
     * @return array
     */
    public static function dataDisplay()
    {
        return array(
        );
    }

    /**
     * Data provider
     *
     * @return array
     */
    public static function dataRegisterTask()
    {
        return array(
            array(array(array('applyhours', 'savehours'))),
        );
    }

    /**
     * Data provider
     *
     * @return array
     */
    public static function dataDateUnix()
    {
        return array(
            array("12", "12", "2005", 1134388800),
            array("12", "80", "2005", 1140264000),
            array("12", "25", "2036", 2113819200),
        );
    }
    
    /**
     * Tests get and set date
     *
     * @param int    $m      The Month
     * @param int    $d      The day
     * @param int    $y      The Year
     * @param string $expect The date we expect returned
     *
     * @dataProvider dataDateUnix()
     * @return null
     */
    function testDateUnix($m, $d, $y, $expect)
    {
        $date = TimeclockController::dateUnix($m, $d, $y);
        $this->assertSame($expect, $date);
    }
    /**
     * Data provider
     *
     * @return array
     */
    public static function dataDateUnixSql()
    {
        return array(
            array("2005-12-12", 1134388800),
            array("2000-12-25", 977745600),
            array("2036-12-25", 2113819200),
        );
    }
    
    /**
     * Tests get and set date
     *
     * @param int    $sqlDate The date in sql format ("Y-m-d")
     * @param string $expect  The date we expect returned
     *
     * @dataProvider dataDateUnixSql()
     * @return null
     */
    function testDateUnixSql($sqlDate, $expect)
    {
        $date = TimeclockController::dateUnixSql($sqlDate);
        $this->assertSame($expect, $date);
    }

    /**
     * Data provider
     *
     * @return array
     */
    public static function dataFormatProjId()
    {
        return array(
            array(1, "0001"),
            array(12345, "12345"),
            array(-2, "-002"),
        );
    }
    
    /**
     * Tests get and set date
     *
     * @param int    $id     Id to print out
     * @param string $expect The date we expect returned
     *
     * @dataProvider dataFormatProjId()
     * @return null
     */
    function testFormatProjId($id, $expect)
    {
        $ret = TimeclockController::formatProjId($id);
        $this->assertSame($expect, $ret);
    }
    
    /**
     * Data provider
     *
     * @return array
     */
    public static function dataStoreTasks()
    {
        return array(
            array("savehours", true, array("link" => null, "msg" => "Hours Saved!"), true),      
            array("savehours", false, array("link" => null, "msg" => "Error Saving Hours"), true),      
            array("savehours", false, array("link" => "index.php", "msg" => "Bad form token.  Please try again."), false),      
        );
    }
    

    /**
     * Tests to make sure the store tasks are redirecting properly
     *
     * @param string $task       the method name to call
     * @param bool   $storeRet   The return that "store" should give
     * @param array  $expect     The expected return from setRedirect
     * @param bool   $checkToken The return from JRequest::checkToken()
     *
     * @dataProvider dataStoreTasks()
     * @return null
     */
    public function testStoreTasks($task, $storeRet, $expect, $checkToken=true)
    {
        $GLOBALS["JModel"]["actionReturn"] = $storeRet;
        $GLOBALS["JRequest"]["checkToken"] = $checkToken;
        $this->o->$task();
        $this->assertSame($expect, $GLOBALS["JController"]["setRedirect"]);
    }

}

?>
