<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * ComTimeclock is a Joomla application to keep track of employee time
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    ComTimeclockTest
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008-2009, 2011 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id$
 * @link       https://dev.hugllc.com/index.php/Project:ComTimeclock:JoomlaUI
 */
/** Require the JoomlaMock stuff */
require_once dirname(__FILE__).'/../../include.php';
require_once dirname(__FILE__).'/../../JoomlaMock/testCases/JModelTest.php';
require_once dirname(__FILE__).'/../../../admin/models/users.php';

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Test
 * @package    ComTimeclockTest
 * @subpackage Test
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008-2009, 2011 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:ComTimeclock:JoomlaUI
 */
class ComTimeclockAdminModelUsersTest extends JModelTest
{
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->sqlFile = array(
            dirname(__FILE__)."/../../../admin/sql/timeclock_projects.mysql.utf8.sql",
            dirname(__FILE__)."/../../../admin/sql/timeclock_users.mysql.utf8.sql",
            dirname(__FILE__)."/../../../admin/sql/timeclock_prefs.mysql.utf8.sql",
            dirname(__FILE__)."/../../../admin/sql/timeclock_timesheet.mysql.utf8.sql",
            dirname(__FILE__)."/../../../admin/sql/timeclock_customers.mysql.utf8.sql",
            dirname(__FILE__)."/../../admin/models/users.sql",
        );
        $this->o = new TimeclockAdminModelUsers();
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
        parent::tearDown();
        unset($this->o);
    }

    /**
     * Data provider
     *
     * @return array
     */
    public static function dataGetDataCache()
    {
        return array(
            array(null, null, null),
        );
    }
    /**
     * Data provider
     *
     * @return array
     */
    public static function dataStore()
    {
        return array(
            array(
                array(
                    "id" => 15,
                    "prefs" => array(1,2,3,4,5),
                    "published" => 1,
                    "startDate" => "2008-04-12",
                    "endDate" => "2009-04-12",
                ),
                "post",
                array(
                    "id" => 15,
                    "prefs" => 'a:2:{s:11:"holidayperc";i:100;s:6:"status";s:8:"FULLTIME";}',
                    "published" => 1,
                    "startDate" => "2008-04-12",
                    "endDate" => "2009-04-12",
                    "manager" => null,
                ),
                "store",
            ),
        );
    }
    /**
     * Test the store function
     *
     * @param array  $data     The input data array
     * @param string $hash     The hash to use for the input
     * @param bool   $expect   The expected return
     * @param string $function The function to test
     *
     * @dataProvider dataStore
     * @return none
     */
    public function testStore($data, $hash, $expect, $function = "store")
    {
        JRequest::set($data, $hash);
        $this->o->$function();
        $array = $GLOBALS["JTable"]["store"]["bind"];
        unset($array["history"]);
        $this->assertSame($expect, $array);
    }
    /**
     * Data provider
     *
     * @return array
     */
    public static function dataStoreRet()
    {
        return array(
            array(null, "store", true, array("id" => 13)),
            array("bind", "store", false, array("id" => 13)),
            array("check", "store", false, array("id" => 13)),
            array("store", "store", false, array("id" => 13)),

        );
    }
    /**
     * Data provider
     *
     * @return array
     */
    public static function dataAddProjectRet()
    {
        return array(
            array(
                null,
                "addproject",
                true,
                array(
                    "id" => 13,
                    "projid" => 10
                )
            ),
            array(
                "bind",
                "addproject",
                false,
                array(
                    "id" => 13,
                    "projid" => 10
                )
            ),
            array(
                "check",
                "addproject",
                false,
                array(
                    "id" => 13,
                    "projid" => 10
                )
            ),

            array(
                null,
                "removeproject",
                true,
                array(
                    "id" => 13,
                    "projid" => array(10)
                )
            ),
            array(
                "bind",
                "removeproject",
                false,
                array(
                    "id" => 13,
                    "projid" => array(10)
                )
            ),
        );
    }

    /**
     * Test the store function
     *
     * @param string $bad      The part to make fail (bind, check, store, null)
     * @param string $function The function to test
     * @param bool   $expect   The expected return
     * @param array  $data     The input data array
     *
     * @dataProvider dataAddProjectRet
     * @return none
     */
    public function testAddProjectRet($bad, $function, $expect, $data=array())
    {
        if (!empty($bad)) {
            $GLOBALS["JTable"][$bad]["return"] = false;
        }
        JRequest::set($data, $hash);
        $ret = $this->o->$function($data["projid"], $data["id"]);
        $this->assertSame($expect, $ret);
    }

}

?>
