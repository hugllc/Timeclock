<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * Timeclock is a Joomla application to keep track of employee time
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    JoomlaMock
 * @subpackage TestCase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    GIT: $Id: f25cd6c32963ec3e1b13b9c3fa3c3c30a7e1ba00 $
 * @link       https://dev.hugllc.com/index.php/Project:JoomlaMock
 */
namespace com_timeclock\tests\site\models;
/** Base test class */
require_once __DIR__."/ModelTestBase.php";
/** Class under test */
require_once SRC_PATH."/com_timeclock/site/models/timesheet.php";

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Test
 * @package    JoomlaMock
 * @subpackage TestCase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:JoomlaMock
 */
    class TimesheetTest extends ModelTestBase
{
    /** This is the model we are testing */
    protected $model = '\TimeclockModelsTimesheet';
    /**
    * data provider for testGetList
    *
    * @return array
    */
    public static function dataGetList()
    {
        return array(
            "Super User" => array(
                array(
                    "id" => 42,
                    "date" => "2014-09-10",
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                array(
                    1 => array(
                        "2014-09-04" => array(
                            "timesheet_id" => 1,
                            "user_id" => 42,
                        ),
                    ),
                    2 => array(
                        "2014-09-03" => array(
                            "timesheet_id" => 2,
                            "user_id" => 42,
                        ),
                    ),
                    4 => array(
                        "2014-09-01" => array(
                            "timesheet_id" => 3,
                            "user_id" => 44,
                        ),
                    ),
                    5 => array(
                        "2014-09-02" => array(
                            "timesheet_id" => 4,
                            "user_id" => 42,
                        ),
                        "2014-09-05" => array(
                            "timesheet_id" => 5,
                            "user_id" => 42,
                        ),
                    ),
                ) // Expected Return
            ),
            "Get All" => array(
                array(
                    "date" => "2014-09-10",
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                array(
                    2 => array(
                        "2014-09-03" => array(
                            "timesheet_id" => 7,
                            "user_id" => 44,
                        ),
                    ),
                ) // Expected Return
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $input   The name of the variable to test.
    * @param array $options The options to give the mock session.
    * @param array $expects The expected return
    *
    * @return null
    *
    * @dataProvider dataGetList
    */
    public function testGetList($input, $options, $expects)
    {
        $this->setSession($options);
        $this->setInput($input);
        $model = $this->model;
        $obj = new $model();
        $ret = $obj->listItems();
        $check = array();
        $this->assertInternalType("array", $ret, "Return is not an array");
        foreach ($ret as $proj_id => $work) {
            if (is_array($work) && isset($expects[$proj_id]) && is_array($expects[$proj_id])) {
                foreach($work as $key => $return) {
                    if (isset($expects[$proj_id][$key]) && is_array($expects[$proj_id][$key])) {
                        $check[$proj_id][$key] = array();
                        foreach ($expects[$proj_id][$key] as $k => $v) {
                            $check[$proj_id][$key][$k] = $return->$k;
                        }
                    } else {
                        $return = is_object($return) ? get_object_vars($return) : $return;
                        $check[$proj_id][$key] = $return;
                    }
                }
            } else {
                $work = is_object($work) ? get_object_vars($work) : $work;
                $check[$proj_id] = $work;
            }
        }
        $this->assertEquals($expects, $check);
    }
    /**
    * data provider for testGetList
    *
    * @return array
    */
    public static function dataGetProjects()
    {
        return array(
            "Super User" => array(
                array(
                    "id" => 42,
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                array(
                    0 => array(
                        'id' => 0,
                        'name' => 'JNONE',
                        'description' => '',
                        'proj' => array(
                            1 => array(
                                "project_id" => 1,
                                "user_id" => 42,
                            ),
                            2 => array(
                                "project_id" => 2,
                                "user_id" => 42,
                            ),
                            3 => array(
                                "project_id" => 3,
                                "user_id" => 42,
                            ),
                            4 => array(
                                "project_id" => 4,
                                "user_id" => 42,
                            ),
                        ),
                    ),
                ) // Expected Return
            ),
            "Get All" => array(
                array(
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                array(
                    0 => array(
                        'id' => 0,
                        'name' => 'JNONE',
                        'description' => '',
                        'proj' => array(
                            1 => array(
                                "project_id" => 1,
                                "user_id" => 44,
                            ),
                            5 => array(
                                "project_id" => 5,
                                "user_id" => 44,
                            ),
                        ),
                    ),
                ) // Expected Return
            ),
        );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param mixed $input   The name of the variable to test.
    * @param array $options The options to give the mock session.
    * @param array $expects The expected return
    *
    * @return null
    *
    * @dataProvider dataGetProjects
    */
    public function testGetProjects($input, $options, $expects)
    {
        $this->setSession($options);
        $this->setInput($input);
        $model = $this->model;
        $obj = new $model();
        $ret = $obj->listProjects();
        $check = array();
        $this->assertInternalType("array", $ret, "Return is not an array");
        foreach ($ret as $proj_id => $work) {
            $check[$proj_id] = array(
                'id' => $work["id"],
                'name' => $work["name"],
                'description' => $work["description"],
                'proj' => array()
            );
            if (is_array($work) && isset($expects[$proj_id]) && is_array($expects[$proj_id]["proj"])) {
                foreach($work["proj"] as $key => $return) {
                    if (isset($expects[$proj_id]["proj"][$key]) && is_array($expects[$proj_id]["proj"][$key])) {
                        $check[$proj_id]["proj"][$key] = array();
                        foreach ($expects[$proj_id]["proj"][$key] as $k => $v) {
                            $check[$proj_id]["proj"][$key][$k] = $return->$k;
                        }
                    } else {
                        $return = is_object($return) ? get_object_vars($return) : $return;
                        $check[$proj_id]["proj"][$key] = $return;
                    }
                }
            } else {
                $work = is_object($work) ? get_object_vars($work) : $work;
                $check[$proj_id] = $work;
            }
        }
        $this->assertEquals($expects, $check);
    }
    
    /**
    * data provider for testGetTotal
    *
    * @return array
    */
    public static function dataGetTotal()
    {
        return array(
            "ID Given" => array(
                array(
                    "id" => 2,
                ),  // Input array (Mocks $_REQUEST)
                array(
                ),  // The session information
                7   // Expected Return
            ),
            "Nominal" => array(
                array(
                ), // Input array (Mocks $_REQUEST)
                array(
                ),  // The session information
                7  // Expected Return
            ),
        );
    }
    /**
    * data provider for testGetTotal
    *
    * @return array
    */
    public static function dataCheckSortFields()
    {
        return array(
            "Empty Array" => array(
                array(
                ), // Fields given
                array(
                    't.worked' => "JDEFAULT",
                ), // Expected return
            ),
            "Empty String" => array(
                "", // Fields given
                "t.worked", // Expected return
            ),
            "Good String" => array(
                "t.modified", // Fields given
                "t.modified", // Expected return
            ),
            "Good Array with some bad strings" => array(
                array(
                    "t.timesheet_id" => "ID",
                    "t.modified" => "Name",
                    "c.company" => "Company",
                    "injection" => "Code Injection",
                ), // Fields given
                array(
                    "t.timesheet_id" => "ID",
                    "t.modified" => "Name",
                ), // Expected return
            ),
        );
    }
    /**
    * data provider for testGet
    *
    * @return array
    */
    public static function dataGetState()
    {
        return array(
            "default" => array("_limit", "asdf", array(), array(), "asdf"),
            "Null" => array("_limit", null, array(), array(), null),
            "Class name" => array(
                null, null, array(), array(), "Joomla\Registry\Registry"
            ),
        );
    }
    /**
    * data provider for testGetList
    *
    * @return array
    */
    public static function dataPeriodTotal()
    {
        return array(
             "No Hours" => array(
                array(
                    "id" => 42,
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                null,
                null,
                null,
                true,
                0.0 // Expected Return
            ),
             "Full Week Paid Only" => array(
                array(
                    "id" => 42,
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                null,
                "2014-09-01",
                "2014-09-07",
                true,
                24.0 // Expected Return
            ),
             "3 days Paid Only" => array(
                array(
                    "id" => 42,
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                null,
                "2014-09-01",
                "2014-09-03",
                true,
                16.0 // Expected Return
            ),
             "Full Week Indirect ID" => array(
                array(
                    "id" => 42,
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                null,
                "2014-09-01",
                "2014-09-07",
                false,
                40.0 // Expected Return
            ),
             "3 days Indirect ID" => array(
                array(
                    "id" => 42,
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                null,
                "2014-09-01",
                "2014-09-03",
                false,
                24.0 // Expected Return
            ),
             "Full Week Indirect ID" => array(
                array(
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                42,
                "2014-09-01",
                "2014-09-07",
                false,
                40.0 // Expected Return
            ),
             "3 days Direct ID" => array(
                array(
                ), // Input array (Mocks $_REQUEST)
                array(
                    "get.user.id"       => 44,
                    "get.user.name"     => "Manager",
                    "get.user.username" => "manager",
                    "get.user.guest"    => 0,
                ),  // The session information
                42,
                "2014-09-01",
                "2014-09-03",
                false,
                24.0 // Expected Return
            ),
       );
    }
    /**
    * test the set routine when an extra class exists
    *
    * @param mixed  $input   The name of the variable to test.
    * @param array  $options The options to give the mock session.
    * @param int    $id      The user id of the timesheet to get
    * @param string $start   The first day of employment
    * @param string $end     The last day of employment
    * @param bool   $paid    Only paid records?
    * @param array  $expects The expected return
    *
    * @return null
    *
    * @dataProvider dataPeriodTotal
    */
    public function testPeriodTotal(
        $input, $options, $id, $start, $end, $paid, $expect
    ) {
        $this->setSession($options);
        $this->setInput($input);
        $model = $this->model;
        $obj = new $model();
        $ret = $obj->periodTotal($id, $start, $end, $paid);
        $this->assertSame($expect, $ret);
    }

}

?>
