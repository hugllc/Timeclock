<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * Timeclock is a Joomla application to keep track of employee time
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    JoomlaMock
 * @subpackage TestCase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    GIT: $Id: 04754bc6176630e0c25ce645f83af96c852bf3ac $
 * @link       https://dev.hugllc.com/index.php/Project:JoomlaMock
 */
namespace com_timeclock\tests\site\helpers;
/** Base class */
//require_once SRC_PATH."/com_timeclock/admin/helpers/timeclock.php";

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Test
 * @package    JoomlaMock
 * @subpackage TestCase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:JoomlaMock
 */
class TimeclockHelpersTimeclockTest extends \com_timeclock\TestCase
{
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        parent::setUp();
    }
    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
    
    /**
    * data provider for testGet
    *
    * @return array
    */
    public static function dataGetWCompCodes()
    {
        return array(
            "Nothing Set" => array(
                array(), // $params
                array(), // $userparams
                array("Hours"),    // $expect
            ),
            "WComp Off" => array(
                array("wCompEnable" => false), // $params
                array(), // $userparams
                array("Hours"),    // $expect
            ),
            "WComp On No Settings" => array(
                array("wCompEnable" => true, "wCompCodes" => "\n\n\n"), // $params
                array(), // $userparams
                array("Hours"),    // $expect
            ),
            "WComp On No Label" => array(
                array("wCompEnable" => true, "wCompCodes" => "0001\n0002\n0003\n"), // $params
                array(), // $userparams
                array(1 => '1', 2 => '2', 3 => '3'),    // $expect
            ),
            "WComp On Normal" => array(
                array("wCompEnable" => true, "wCompCodes" => "   0001 Code    1\n0002   Code 2\n0003 Code 3\n"), // $params
                array(), // $userparams
                array(1 => 'Code    1', 2 => 'Code 2', 3 => 'Code 3'),    // $expect
            ),
        );
    }
    /**
    * Checks to see if we get proper stuff from this function
    *
    * @param string $date   The date to give the function
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGetWCompCodes
    */
    public function testGetWCompCodes($params, $userparams, $expect)
    {
        $this->setComponentConfig($params);
        $this->setUserConfig($userparams);

        $this->assertSame($expect, \TimeclockHelpersTimeclock::getWCompCodes());
    }
    /**
    * data provider for testGet
    *
    * @return array
    */
    public static function dataGetPtoAccrualRates()
    {
        return array(
            "Nothing Set" => array(
                array(), // $params
                array(), // $userparams
                array(),    // $expect
            ),
            "PTO Off" => array(
                array("ptoEnable" => false), // $params
                array(), // $userparams
                array(),    // $expect
            ),
            "PTO On No Settings" => array(
                array("ptoEnable" => true, "ptoAccrualRates" => "\n\n\n"), // $params
                array(), // $userparams
                array(),    // $expect
            ),
            "PTO On Normal" => array(
                array("ptoEnable" => true, "ptoAccrualRates" => "FULLTIME:PARTTIME\n1:5:2.5\n10:20:10\n"), // $params
                array(), // $userparams
                array(
                    "FULLTIME" => array(1.0 => 5.0, 10.0 => 20.0),
                    "PARTTIME" => array(1.0 => 2.5, 10.0 => 10.0)
                ),    // $expect
            ),
        );
    }
    /**
    * Checks to see if we get proper stuff from this function
    *
    * @param string $date   The date to give the function
    * @param array  $expect The expected return
    *
    * @return null
    *
    * @dataProvider dataGetPtoAccrualRates
    */
    public function testGetPtoAccrualRates($params, $userparams, $expect)
    {
        $this->setComponentConfig($params);
        $this->setUserConfig($userparams);

        $this->assertSame($expect, \TimeclockHelpersTimeclock::getPtoAccrualRates());
    }

}
