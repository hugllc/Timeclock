<?php
/**
 * Tests the driver class
 *
 * PHP Version 5
 *
 * <pre>
 * Timeclock is a Joomla application to keep track of employee time
 * Copyright (C) 2007 Hunt Utilities Group, LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * </pre>
 *
 * @category   Test
 * @package    JoomlaMock
 * @subpackage TestCase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version    SVN: $Id: 24dad5560cc53415e3127154df4199e2421745d1 $
 * @link       https://dev.hugllc.com/index.php/Project:JoomlaMock
 */
namespace com_timeclock;
/** Base class */
require_once SRC_PATH."/com_timeclock/admin/models/default.php";
/** Class under test */
require_once SRC_PATH."/com_timeclock/admin/models/customer.php";

/**
 * Test class for driver.
 * Generated by PHPUnit_Util_Skeleton on 2007-10-30 at 08:44:25.
 *
 * @category   Test
 * @package    JoomlaMock
 * @subpackage TestCase
 * @author     Scott Price <prices@hugllc.com>
 * @copyright  2008 Hunt Utilities Group, LLC
 * @license    http://opensource.org/licenses/gpl-license.php GNU Public License
 * @link       https://dev.hugllc.com/index.php/Project:JoomlaMock
 */
class TestCaseDatabase extends \TestCaseDatabase
{
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->saveFactoryState();

        \JFactory::$application = $this->getMockCmsApp();
        \JFactory::$config      = $this->getMockConfig();
        \JFactory::$document    = $this->getMockDocument();
        \JFactory::$language    = $this->getMockLanguage();
        \JFactory::$session     = $this->getMockSession();
        parent::setUp();
    }
    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return null
     *
     * @access protected
     */
    protected function tearDown()
    {
        $this->restoreFactoryState();
        parent::tearDown();
    }
    /**
     * This method is called before the first test of this test class is run.
     *
     * @return  void
     *
     * @since   12.1
     */
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        $db = \JFactory::getDBO();
        self::insertFileDB(TEST_PATH."/schema/tables.sql");
        self::insertFileDB(TEST_PATH."/stubs/extensions.sql");
        
    }
    /**
     * Gets the data set to be loaded into the database during setup
     *
     * @return  PHPUnit_Extensions_Database_DataSet_CsvDataSet
     *
     * @since   3.2
     */
    protected function getDataSet()
    {
        $dataSet = new \PHPUnit_Extensions_Database_DataSet_CsvDataSet(',', "'", '\\');

        $dataSet->addTable('jos_extensions', JPATH_TEST_DATABASE . '/jos_extensions.csv');
        $dataSet->addTable('jos_modules', JPATH_TEST_DATABASE . '/jos_modules.csv');
        $dataSet->addTable('jos_modules_menu', JPATH_TEST_DATABASE . '/jos_modules_menu.csv');
        $dataSet->addTable('jos_users', JPATH_TEST_DATABASE . '/jos_users.csv');

        $dataSet->addTable('jos_timeclock_customers', TEST_PATH . '/stubs/jos_timeclock_customers.csv');
        $dataSet->addTable('jos_timeclock_departments', TEST_PATH . '/stubs/jos_timeclock_departments.csv');
        $dataSet->addTable('jos_timeclock_projects', TEST_PATH . '/stubs/jos_timeclock_projects.csv');
        $dataSet->addTable('jos_timeclock_users', TEST_PATH . '/stubs/jos_timeclock_users.csv');
        $dataSet->addTable('jos_timeclock_timesheet', TEST_PATH . '/stubs/jos_timeclock_timesheet.csv');
        return $dataSet;
    }
    /**
     * Loads a file into the database
     *
     * @return null
     *
     * @access protected
     */
    protected static function insertFileDB($file)
    {
        $db = \JFactory::getDBO();
        $queries = file_get_contents($file);
        foreach (explode(";", $queries) as $query) {
            if (!empty(trim($query))) {
                $db->setQuery($query);
                $db->execute();
            }
        }
    }
    /**
    * This function sets the input data to the given array
    * 
    * @param array $input The input array to use
    *
    * @return null
    */
    protected function setInput($input)
    {
        \JFactory::$application->input = new \JInput($input);
    }
    /**
    * This function sets the input data to the given array
    * 
    * @param   array   $options  An array of optional configuration values.
    *                            getId : the value to be returned by the mock getId method
    *                            get.user.id : the value to assign to the user object id returned by get('user')
    *                            get.user.name : the value to assign to the user object name returned by get('user')
    *                            get.user.username : the value to assign to the user object username returned by get('user')
    *                            get.user.guest : the value to assign to the user object guest returned by get('user')
    *
    * @return null
    */
    protected function setSession($options)
    {
        \JFactory::$session = $this->getMockSession($options);
    }


}

?>
